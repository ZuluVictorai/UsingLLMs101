import tkinter as tk
import subprocess
import threading
import sys

class SSHGUIApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("SSH GUI")
        self.geometry("300x150")

        # Create labels and entry fields for host, username, and password
        tk.Label(self, text="Host:").grid(row=0, column=0)
        self.host_entry = tk.Entry(self)
        self.host_entry.grid(row=0, column=1)

        tk.Label(self, text="Username:").grid(row=1, column=0)
        self.username_entry = tk.Entry(self)
        self.username_entry.grid(row=1, column=1)

        tk.Label(self, text="Password:").grid(row=2, column=0)
        self.password_entry = tk.Entry(self, show="*")
        self.password_entry.grid(row=2, column=1)

        # Create a button to initiate SSH connection
        self.connect_button = tk.Button(self, text="Connect", command=self.connect_ssh)
        self.connect_button.grid(row=3, column=1)

    def connect_ssh(self):
        host = self.host_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()

        # Create and start a new thread for the SSH connection
        ssh_thread = threading.Thread(target=self.run_ssh_connection, args=(host, username, password))
        ssh_thread.start()

    def run_ssh_connection(self, host, username, password):
        try:
            # Construct the SSH command
            ssh_command = f"C:\\Windows\\System32\\OpenSSH\\ssh.exe {username}@{host}"

            # Create a subprocess to execute the SSH command
            process = subprocess.Popen(ssh_command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

            # Send the password to the SSH process
            process.stdin.write(f"{password}\n")
            process.stdin.flush()

            # Handle the fingerprint prompt
            fingerprint_prompt = "Are you sure you want to continue connecting (yes/no/[fingerprint])?"
            while True:
                output = process.stdout.readline()
                if fingerprint_prompt in output:
                    process.stdin.write("yes\n")
                    process.stdin.flush()
                    break
                elif process.poll() is not None:
                    break

            # Wait for the process to terminate
            stdout, stderr = process.communicate()

            # Print the output
            if stdout:
                print(stdout)
            if stderr:
                print(stderr)

            # If SSH connection is successful, open the variable input window
            if process.returncode == 0:
                self.variable_input_window = VariableInputWindow(self)
                self.variable_input_window.grab_set()
            else:
                print(f"SSH command failed with return code: {process.returncode}")

        except Exception as e:
            print(f"Error: {e}")

class VariableInputWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Variable Input")
        self.geometry("300x200")

        # Create labels and entry fields for frequency, bandwidth, and node ID
        tk.Label(self, text="Frequency:").grid(row=0, column=0)
        self.frequency_entry = tk.Entry(self)
        self.frequency_entry.grid(row=0, column=1)

        tk.Label(self, text="Bandwidth:").grid(row=1, column=0)
        self.bandwidth_var = tk.StringVar()
        self.bandwidth_var.set("5")  # Set the default value
        bandwidth_options = ["5", "10", "20"]
        self.bandwidth_menu = tk.OptionMenu(self, self.bandwidth_var, *bandwidth_options)
        self.bandwidth_menu.grid(row=1, column=1)

        tk.Label(self, text="Node ID:").grid(row=2, column=0)
        self.node_id_entry = tk.Entry(self)
        self.node_id_entry.grid(row=2, column=1)

        # Create a button to submit the variables
        self.submit_button = tk.Button(self, text="Submit", command=self.submit_variables)
        self.submit_button.grid(row=3, column=1)

    def submit_variables(self):
        frequency = self.frequency_entry.get()
        bandwidth = self.bandwidth_var.get()
        node_id = self.node_id_entry.get()

        # Do something with the variables, e.g., execute a command on the remote system
        print(f"Frequency: {frequency}")
        print(f"Bandwidth: {bandwidth}")
        print(f"Node ID: {node_id}")

        # Close the variable input window
        self.destroy()

if __name__ == "__main__":
    app = SSHGUIApp()
    app.mainloop()
